{"version":3,"sources":["camera.js"],"names":["cc","Class","extends","Component","properties","target","default","type","Node","camera","Camera","anim","Animation","jumpZoom","centerAtStart","smoothFollow","followX","visible","followY","minFollowDist","followRatio","overview","overviewTargets","overviewMargin","speedZoom","zoomInSpeed","zoomOutSpeed","canShake","shakeDuration","pointerPan","pointerXMult","pointerYMult","useBoundaries","topBound","bottomBound","leftBound","rightBound","onLoad","startFollow","canvas","find","getComponent","Canvas","visibleSize","view","getVisibleSize","initZoomRatio","zoomRatio","node","x","convertToWorldSpaceAR","Vec2","ZERO","previousPos","position","on","onMouseMove","onTouchMove","pointerPos","onEnable","director","getPhysicsManager","attachDebugDrawToCamera","onDisable","detachDebugDrawFromCamera","lateUpdate","dt","targetPos","parent","convertToNodeSpaceAR","y","ratio","winSize","height","getOverviewTargetsMidpoint","midPoint","p","minX","minY","maxX","maxY","i","length","distX","Math","abs","distY","max","width","shakeCamera","play","scheduleOnce","stopShake","bind","stop","event","getLocation"],"mappings":"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","file":"camera.js","sourceRoot":"../../../../assets/Script","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        target: {\n            default: null,\n            type: cc.Node\n        },\n        camera: cc.Camera,\n        anim: cc.Animation,\n        //Jump Zoom\n        jumpZoom: false,\n        centerAtStart: false,\n        //Smooth Follow\n        smoothFollow: false,\n        followX: {\n            default: 0,\n            visible () {\n                return this.smoothFollow;\n            }\n        },\n        followY: { \n            default: 0,\n            visible () {\n                return this.smoothFollow;\n            }\n        },\n        minFollowDist: {\n            default: 0,\n            visible () {\n                return this.smoothFollow;\n            }\n        },            \n        followRatio:{\n            default: 0,\n            visible () {\n                return this.smoothFollow;\n            }\n        },\n        //Overview\n        overview: false,\n        overviewTargets: {\n            default: [],\n            type: [cc.Node],\n            visible () {\n                return this.overview;\n            }            \n        },\n        overviewMargin: {\n            default: 0,\n            visible () {\n                return this.overview;\n            }\n        },        \n        //Speed Zoom\n        speedZoom: false,\n        zoomInSpeed: {\n            default: 0,\n            visible () {\n                return this.speedZoom;\n            }\n        },\n        zoomOutSpeed: {\n            default: 0,\n            visible () {\n                return this.speedZoom;\n            }\n        },\n        //Camera Shake\n        canShake: false,\n        shakeDuration: {\n            default: 0,\n            visible () {\n                return this.canShake;\n            }\n        },\n        //Pointer Pan\n        pointerPan: false,\n        pointerXMult: {\n            default: 0,\n            visible () {\n                return this.pointerPan;\n            }\n        },\n        pointerYMult: {\n            default: 0,\n            visible () {\n                return this.pointerPan;\n            }\n        },\n        //Boundaries in world position\n        useBoundaries: false,\n        topBound: {\n            default: 0,\n            visible () {\n                return this.useBoundaries;\n            }\n        },\n        bottomBound: {\n            default: 0,\n            visible () {\n                return this.useBoundaries;\n            }\n        },\n        leftBound: {\n            default: 0,\n            visible () {\n                return this.useBoundaries;\n            }\n        },\n        rightBound: {\n            default: 0,\n            visible () {\n                return this.useBoundaries;\n            }\n        }\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        this.startFollow = false;\n        let canvas = cc.find('Canvas').getComponent(cc.Canvas); \n        this.visibleSize = cc.view.getVisibleSize();\n        this.initZoomRatio = this.camera.zoomRatio;\n        //place camera on target if centerAtStart\n        if (this.centerAtStart) {\n            this.node.x = this.target.convertToWorldSpaceAR(cc.Vec2.ZERO).x;\n        }\n        this.previousPos = this.node.position;\n        if (this.pointerPan) {\n            // this.jumpZoom = false;\n            this.overview = false;\n            this.speedZoom = false;\n            canvas.node.on('mousemove', this.onMouseMove, this);\n            canvas.node.on('touchmove', this.onTouchMove, this);\n            this.pointerPos = null;\n        }\n        if (this.overview) {\n            this.jumpZoom = false;\n            this.speedZoom = false;\n        }\n        if (this.speedZoom) {\n            this.jumpZoom = false;\n        }\n    },\n\n    onEnable: function () {\n        cc.director.getPhysicsManager().attachDebugDrawToCamera(this.camera);\n    },\n    onDisable: function () {\n        cc.director.getPhysicsManager().detachDebugDrawFromCamera(this.camera);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    lateUpdate: function (dt) {\n        let targetPos;\n        // this.node.y = 120;\n        // if (this.overview){\n        //     targetPos = this.target.parent.convertToWorldSpaceAR(this.getOverviewTargetsMidpoint());\n        // } else {\n            targetPos = this.target.parent.convertToWorldSpaceAR(this.target.position);\n        // }\n\n        // if (this.pointerPan && this.pointerPos) {\n        //     let xDelta = this.pointerPos.x / (this.visibleSize.width/2) - 1;\n        //     let yDelta = this.pointerPos.y / (this.visibleSize.height/2) - 1;\n        //     xDelta *= this.pointerXMult;\n        //     yDelta *= this.pointerYMult;\n        //     targetPos = cc.pAdd(targetPos, cc.p(xDelta, yDelta));\n        // }\n\n        //smooth follow\n        // if (this.smoothFollow) {\n        //     if (Math.abs(targetPos.x - this.node.x) >= this.followX ||\n        //         Math.abs(targetPos.y - this.node.y) >= this.followY) {//when camera and target distance is larger than max distance\n        //         this.startFollow = true;\n        //     }\n        //     if (this.startFollow) {\n        //         this.node.x = this.node.position.lerp(targetPos,this.followRatio).x;\n        //         if (cc.pDistance(targetPos, this.node.position) <= this.minFollowDist) {\n        //             this.startFollow = false;\n        //         }\n        //     }\n        // } else {\n            if(targetPos.x >= -1920 && targetPos.x <= 1920){\n                this.node.x = this.node.parent.convertToNodeSpaceAR(targetPos).x;\n            }\n        // }\n            if(targetPos.y >= -280){\n                this.node.y = this.node.parent.convertToNodeSpaceAR(targetPos).y;\n            }\n        //speed zoom\n        // if (this.speedZoom) {\n        //     let curSpeed = Math.abs(this.previousPos.x - targetPos.x) / dt;\n        //     let ratio = 0;\n        //     if (curSpeed > this.zoomOutSpeed) {\n        //         ratio = 1 - (curSpeed - this.zoomOutSpeed) / (this.zoomInSpeed  - this.zoomOutSpeed);\n        //         this.camera.zoomRatio = cc.lerp(this.camera.zoomRatio, 1.3, 0.02);\n        //     } else {\n        //         this.camera.zoomRatio = cc.lerp(this.camera.zoomRatio, this.initZoomRatio, 0.02);\n        //     }\n        // }\n\n        this.previousPos = targetPos;\n        \n        //jump zoom\n        if (this.jumpZoom) {\n            let ratio = targetPos.y / cc.winSize.height;\n            this.camera.zoomRatio = 1 + (0.6 - ratio) * 0.35;\n        }\n\n        //boundaries\n\n        // if (this.useBoundaries) {\n        //     let width = (this.visibleSize.width/2) / this.camera.zoomRatio;\n        //     let height = (this.visibleSize.height/2) / this.camera.zoomRatio;\n        //     let minX = this.node.x - width;\n        //     let maxX = this.node.x + width;  \n        //     let minY = this.node.y - height;\n        //     let maxY = this.node.y + height;\n        //     if (minX < this.leftBound) {\n        //         this.node.x = this.leftBound + width;\n        //     }\n        //     if (minY < this.bottomBound) {\n        //         this.node.y = this.bottomBound + height;\n        //     }\n        //     if (maxX > this.rightBound) {\n        //         this.node.x = this.rightBound - width;\n        //     }\n        //     if (maxY > this.topBound) {\n        //         this.node.y = this.topBound - height;\n        //     }\n        // }\n    },\n\n    getOverviewTargetsMidpoint () {\n        let midPoint = cc.p(0, 0);\n        let minX = 99999, minY = 99999, maxX = -99999, maxY = -99999;\n        for (let i = 0; i < this.overviewTargets.length; ++i) {\n            let target = this.overviewTargets[i];\n            maxX = target.x > maxX ? target.x : maxX;\n            minX = target.x < minX ? target.x : minX;\n            maxY = target.y > maxY ? target.y : maxY;\n            minY = target.y < minY ? target.y : minY;\n        }\n        maxX += this.overviewMargin;\n        minX -= this.overviewMargin;\n        maxY += this.overviewMargin;\n        minY -= this.overviewMargin;\n        let distX = Math.abs(maxX - minX);\n        let distY = Math.abs(maxY - minY);\n        midPoint = cc.p(minX + distX/2, minY + distY/2);\n        let ratio = Math.max(distX / this.visibleSize.width, distY / this.visibleSize.height);\n        this.camera.zoomRatio = 1/ratio;\n        return midPoint;\n    },\n\n    shakeCamera () {\n        if (!this.canShake) return;\n        this.anim.play('shake');\n        this.scheduleOnce(this.stopShake.bind(this), this.shakeDuration);\n    },\n\n    stopShake () {\n        this.anim.stop();\n        this.camera.node.position = cc.p(0, 0);\n    },\n\n    onMouseMove (event) {\n        this.pointerPos = event.getLocation();\n    },\n\n    onTouchMove (event) {\n        this.pointerPos = event.getLocation();\n    }    \n});"]}