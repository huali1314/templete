{"version":3,"sources":["food.js"],"names":["global","require","Direction","cc","Class","extends","Component","properties","quickSwimSpeedRadio","default","displayName","minSpeed","normalSwimSpeedRadio","maxHp","minSafeDistance","maxSafeDistance","reactionTime","onLoad","tempXOffset","winSize","director","getWinSize","player","find","bg","water","getChildByName","waterLine","height","scheduler","getScheduler","hp","node","sp","progressBar","getComponent","ProgressBar","rigidBody","RigidBody","randDirection","start","initData","initStatus","registerEvent","randomSwim","schedulerCaluDistance","self","eventlistener","on","attackPoint","canAttack","curHp","updateProgress","update","dt","Swim","updateGravity","y","gravityScale","isInWater","temp","progress","destroy","randX","random0To1","randY","isLeft","isUp","isQuickSwimming","scaleX","applyForceToCenter","v2","rand1","Math","ceil","rand2","caluDistance","x_value","x","y_value","distance","abs","changeDirection","schedule","onBeginContact","contact","other","tag","group","onStayContact","onEndContact"],"mappings":"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","file":"food.js","sourceRoot":"../../../../assets/Script","sourcesContent":["var global = require(\"./global\");\nvar Direction = [false,true]//true代表左游或上游 false代表右游或下游\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        quickSwimSpeedRadio:{\n            default:3,\n            displayName:\"加速游泳施加力量系数\"\n        },\n        minSpeed:{\n            default:5,\n            displayName:\"最小游泳施加力量\"\n        },\n        normalSwimSpeedRadio:{\n            default:5,\n            displayName:\"正常游泳施加力量系数\"\n        },\n        maxHp:{\n            default:20,\n            displayName:\"最大生命值\"\n        },\n        minSafeDistance:{\n            default:100,\n            displayName:\"最小安全距离\"\n        },\n        maxSafeDistance:{\n            default:300,\n            displayName:\"脱离危险的距离\"\n        },\n        reactionTime:{\n            default:0.5,\n            displayName:\"反应能力\"\n        },//敌人接近时的反应时间，值越小反应越快，同样更费帧率\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.tempXOffset = 0\n        this.winSize = cc.director.getWinSize()\n        this.player = cc.find(\"player\")\n        this.bg = cc.find(\"level\")\n        var water = this.bg.getChildByName(\"water\")\n        this.waterLine = water.height/2\n        this.scheduler = cc.director.getScheduler()\n        // this.actionManager = cc.director.getActionManager()\n        this.hp = this.node.getChildByName(\"hp\")\n        this.sp = this.node.getChildByName(\"sp\")\n        this.progressBar = this.hp.getComponent(cc.ProgressBar)\n        this.rigidBody = this.node.getComponent(cc.RigidBody)\n        this.randDirection()\n    },\n\n    start () {\n        this.initData()\n        this.initStatus()\n        this.registerEvent()\n        this.randomSwim()\n        this.schedulerCaluDistance()\n    },\n    registerEvent:function(){\n        var self = this;\n        global.eventlistener.on(\"penguinAttack\",function(attackPoint){\n            if(self.canAttack){\n                self.curHp -= attackPoint\n                self.updateProgress()\n            }\n        });\n    },\n    initData:function(){\n        this.curHp = this.maxHp\n        // this.progressBar.totalLength = this.maxHp\n    },\n    initStatus:function(){\n        this.canAttack = false\n    },\n    update (dt) {\n        this.Swim()\n        this.updateGravity()\n    },\n    updateGravity:function(){\n        if(this.node.y >= this.waterLine){\n            this.rigidBody.gravityScale = 0.9\n        }else{\n            this.rigidBody.gravityScale = 0.01\n        }\n    },\n    isInWater:function(){\n        if(this.node.y >= this.waterLine){\n            return false\n        }\n        return true\n    }, \n    updateProgress:function(){\n        var temp = this.curHp/this.maxHp  \n        if(temp > 0){\n            this.progressBar.progress = temp\n        }else{\n            // global.eventlistener.fire(\"getFood\")\n            this.node.destroy()\n        }\n    },\n    Swim:function(){\n        if(this.isInWater()){\n            var randX = cc.random0To1() * this.normalSwimSpeedRadio + this.minSpeed \n            var randY = cc.random0To1() * this.normalSwimSpeedRadio + this.minSpeed\n            randX = this.isLeft?-randX:randX\n            randY = this.isUp?randY:-randY\n            randX = this.isQuickSwimming?randX * this.quickSwimSpeedRadio:randX\n            randY = this.isQuickSwimming?randY * this.quickSwimSpeedRadio:randY\n            this.sp.scaleX = this.isLeft?1:-1\n            this.rigidBody.applyForceToCenter(cc.v2(randX,randY),false)\n        }else{\n            this.isUp = false\n        }\n    },\n    randDirection:function(){\n        var rand1 = Math.ceil(cc.random0To1() * 2) - 1\n        var rand2 = Math.ceil(cc.random0To1() * 2) - 1\n        this.isLeft = Direction[rand1]\n        this.isUp = Direction[rand2]\n    },\n    caluDistance:function(){\n        var x_value = this.node.x - this.player.x\n        var y_value = this.node.y - this.player.y\n        var distance = Math.abs(x_value) + Math.abs(y_value)\n        return distance\n    },\n    changeDirection:function(){\n        this.isLeft = (this.node.x > this.player.x)?false:true\n        this.isUp = (this.node.y > this.player.y)?true:false\n    },\n    schedulerCaluDistance:function(){\n        var self = this\n        this.scheduler.schedule(function(){\n            var distance = self.caluDistance()\n            if(distance <= this.minSafeDistance){\n                this.changeDirection()\n                this.isQuickSwimming = true\n            }else if(distance > this.maxSafeDistance){\n                this.isQuickSwimming = false\n            }\n        },this,0.5,false)\n    },\n    randomSwim:function(){\n        var self = this\n        this.scheduler.schedule(function(){\n            self.randDirection()\n        },this,6,999,1,false)\n    },\n    onBeginContact:function(contact, self, other){\n        var tag = other.tag\n        if(tag == 9991){\n            this.isLeft = false\n        }else if(tag == 9992){\n            this.isLeft = true\n        }else if(tag == 9993){\n            this.isUp = true\n        }\n        if(other.node.group == \"player\"){\n            this.canAttack = true\n        }\n    },\n    onStayContact(contact,self,other){\n\n    },\n    onEndContact(contact,self,other){\n        if(other.node.group == \"player\"){\n            this.canAttack = false\n        }\n    },\n});\n"]}