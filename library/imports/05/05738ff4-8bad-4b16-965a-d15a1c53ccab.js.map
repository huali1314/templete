{"version":3,"sources":["../../../../assets/Script/assets/Script/naturalEnemy.js"],"names":["global","require","Direction","cc","Class","extends","Component","properties","onLoad","rigidBody","node","getComponent","RigidBody","scheduler","director","getScheduler","player","find","winSize","getWinSize","bg","water","getChildByName","waterLine","height","start","initStatus","schedulerCaluDistance","randomNormalSwim","isQuickSwimming","update","dt","findFood","pursueSwim","normalSwim","updateGravity","y","gravityScale","isInWater","randX","random0To1","randY","isLeft","isUp","scaleX","applyForceToCenter","v2","isInPlane","randDirection","rand1","Math","ceil","rand2","caluDistance","x_value","x","y_value","distance","abs","self","schedule"],"mappings":"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","file":"naturalEnemy.js","sourceRoot":"../../../../assets/Script","sourcesContent":["var global = require(\"./global\");\nvar Direction = [false,true]//true代表左游或上游 false代表右游或下游\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n        // maxSatiety:1000,\n        // satietyCostSpeed:5,\n        // maxHp:500,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.rigidBody = this.node.getComponent(cc.RigidBody)\n        this.scheduler = cc.director.getScheduler()\n        this.player = cc.find(\"player\")\n\n        this.winSize = cc.director.getWinSize()\n        this.bg = cc.find(\"level\")\n        var water = this.bg.getChildByName(\"water\")\n        this.waterLine = water.height/2\n    },\n\n    start () {\n        this.initStatus()\n        this.schedulerCaluDistance()\n        this.randomNormalSwim()\n    },\n    initStatus:function(){\n        this.isQuickSwimming = false\n    },\n    update (dt) {\n        if(this.findFood){\n            this.pursueSwim()\n        }else{\n            this.normalSwim()\n        }\n        this.updateGravity()\n    },\n    updateGravity:function(){\n        if(this.node.y >= this.waterLine){\n            this.rigidBody.gravityScale = 0.9\n        }else{\n            this.rigidBody.gravityScale = 0.01\n        }\n    },\n    isInWater:function(){\n        if(this.node.y >= this.waterLine){\n            return false\n        }\n        return true\n    }, \n    normalSwim:function(){\n        var randX = cc.random0To1() * 1000 + 1200\n        var randY = cc.random0To1() * 1000 + 1200\n        randX = this.isLeft?-randX:randX\n        randX = this.isQuickSwimming?randX:randX/4\n        if(this.isInWater()){\n            randY = this.isUp?randY:-randY\n            randY = this.isQuickSwimming?randY:randY/4\n            this.node.scaleX = this.isLeft?1:-1\n            this.rigidBody.applyForceToCenter(cc.v2(randX,randY),false)\n        }else{\n            this.isUp = false\n            this.rigidBody.applyForceToCenter(cc.v2(randX,0),false)\n        }\n    },\n    pursueSwim:function(){\n        if(this.isInWater()){\n            \n        }else if(this.isInPlane){\n\n        }\n    },\n    randDirection:function(){\n        var rand1 = Math.ceil(cc.random0To1() * 2) - 1\n        var rand2 = Math.ceil(cc.random0To1() * 2) - 1\n        this.isLeft = Direction[rand1]\n        this.isUp = Direction[rand2]\n    },\n    caluDistance:function(){\n        var x_value = this.node.x - this.player.x\n        var y_value = this.node.y - this.player.y\n        var distance = Math.abs(x_value) + Math.abs(y_value)\n        return distance\n    },\n    schedulerCaluDistance:function(){\n        var self = this\n        this.schedule(function(){\n            var distance = self.caluDistance()\n            if(distance <= 300){\n                this.findFood = true\n                this.isQuickSwimming = true\n            }else if(distance > 500){\n                this.findFood = false\n                this.isQuickSwimming = false\n            }\n        },0.4)\n    },\n    randomNormalSwim:function(){\n        var self = this\n        this.scheduler.schedule(function(){\n            self.randDirection()\n        },this,6,999,1,false)\n    },\n});\n"]}